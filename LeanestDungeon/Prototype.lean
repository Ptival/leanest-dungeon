import Lean
import Mathlib.Algebra.BigOperators.Group.Multiset.Basic
import Mathlib.Data.List.Permutation
import Mathlib.Data.Multiset.Defs

-- A linear logic proposition, with atoms folded in to avoid the extra constructor around them
-- (could be revisited).
inductive LLProp where
  -- Inlining atoms to make it easier on the user
  | Candy
  | Coin
  | Cookie
  | Crown
  | Victory
  -- Actual linear logic constructors
  | Negate : LLProp ‚Üí LLProp
  | MulConj : LLProp ‚Üí LLProp ‚Üí LLProp
  | MulDisj : LLProp ‚Üí LLProp ‚Üí LLProp
  | MulConjUnit
  | MulDisjUnit
  | AddConj : LLProp ‚Üí LLProp ‚Üí LLProp
  | AddDisj : LLProp ‚Üí LLProp ‚Üí LLProp
  | AddConjUnit
  | AddDisjUnit
  | Exclamation
  | Question
  deriving BEq, DecidableEq

infix:67 " ‚äó " => LLProp.MulConj
-- infix:67 " ‚Öã " => LLProp.MulDisj
macro l:term:10 " ‚Öã " r:term:11 : term => `(LLProp.MulDisj $l $r)
infix:67 " & " => LLProp.AddConj
-- infix:67 " ‚äï " => LLProp.AddDisj
macro l:term:10 " ‚äï " r:term:11 : term => `(LLProp.AddDisj $l $r)

notation "~" => LLProp.Negate
notation "ùüô" => LLProp.MulConjUnit
notation "‚ä•" => LLProp.MulDisjUnit
notation "ùüò" => LLProp.AddDisjUnit
notation "!" => LLProp.Exclamation
notation "?" => LLProp.Question

-- not sure how to hide the pre-existing notation, so being cheeky and using it instead
instance : Top LLProp where
  top := .AddConjUnit

-- This is to let one use a notation while defining the inductive for that notation
section
set_option hygiene false
local infix:40 " ‚ä¢ " => LL

-- Writing the rules in the most readable way, then adding smarter constructors that can be applied
-- more liberally by deferring structural equalities as propositional equalities.
inductive LL : Multiset LLProp ‚Üí Multiset LLProp ‚Üí Prop where

  | Init :
    -----
    A ‚ä¢ A

  | Cut :
    Œî‚ÇÅ ‚ä¢ A + Œì‚ÇÅ ‚Üí     A + Œî‚ÇÇ ‚ä¢ Œì‚ÇÇ ‚Üí
    -------------------------------
            Œî‚ÇÅ + Œî2 ‚ä¢ Œì‚ÇÅ + Œì‚ÇÇ

  -- no exchange rule, not because it does not hold, but because we are using multisets which
  -- already allow "exchange" (as they are quotiented by reorderings)

  -- no weakening, no contraction: this is a substructural (linear) logic!

  | MulConjIntro :
    Œî‚ÇÅ ‚ä¢ {A‚ÇÅ} ‚Üí     Œî‚ÇÇ ‚ä¢ {A‚ÇÇ} ‚Üí
    ---------------------------
        Œî‚ÇÅ + Œî‚ÇÇ ‚ä¢ {A‚ÇÅ ‚äó A‚ÇÇ}

  -- | MulDisjIntroL :
  --   Œî‚ÇÅ ‚ä¢ A‚ÇÅ :: Œì‚ÇÅ ‚Üí     Œî‚ÇÇ ‚ä¢ A‚ÇÇ :: Œì‚ÇÇ ‚Üí
  --   -----------------------------------
  --   (A‚ÇÅ ‚Öã  A‚ÇÇ) :: (Œî‚ÇÅ ++ Œî‚ÇÇ) ‚ä¢ Œì‚ÇÅ ++ Œì‚ÇÇ

  -- | MulConjUnitIntro :
  --     Œî ‚ä¢ Œì ‚Üí
  --   ----------
  --   Œî ‚ä¢ ùüô :: Œì

  | AddConjElimL :
    Œî ‚ä¢ {A & B} ‚Üí
    -------------
      Œî ‚ä¢ {A}

  | AddConjElimR :
    Œî ‚ä¢ {A & B} ‚Üí
    -------------
      Œî ‚ä¢ {B}

  -- | NegationIntroL :
  --   Œî ‚ä¢ B :: Œì ‚Üí
  --   ------------
  --   ~ B :: Œî ‚ä¢ Œì

  -- | NegationIntroR :
  --   B :: Œî ‚ä¢ Œì ‚Üí
  --   ------------
  --   Œî ‚ä¢ ~ B :: Œì

  -- TODO: the other rules...

end

infix:40 " ‚ä¢ " => LL

def lollipop A B := (~ A) ‚Öã B
infix:50 " ‚ä∏ " => lollipop

-- Easy to apply "Cut" wrapper
def cut :
    Œî = Œî‚ÇÅ + Œî‚ÇÇ ‚Üí     Œì = Œì‚ÇÅ + Œì‚ÇÇ ‚Üí     Œî‚ÇÅ ‚ä¢ A + Œì‚ÇÅ ‚Üí     A + Œî‚ÇÇ ‚ä¢ Œì‚ÇÇ ‚Üí
    -------------------------------------------------------------------
                                    Œî ‚ä¢ Œì
  := by
    intros H1 H2
    rw [H1, H2]
    apply LL.Cut

-- This rule is useful but derivable.
def LollipopElim :
  Œî = {A, A ‚ä∏ B} ‚Üí
  ----------------
      Œî ‚ä¢ {B}
  := by
    rw [lollipop]
    -- TODO...
    sorry

def lollipopElim :
  Œî = {A, A ‚ä∏ B} + Œî‚ÇÅ ‚Üí     {B} + Œî‚ÇÅ ‚ä¢ Œì ‚Üí
  ----------------------------------------
                  Œî ‚ä¢ Œì
  := by
    intros H‚ÇÅ H‚ÇÇ
    rw [H‚ÇÅ]
    apply cut (A := {B}) (Œî‚ÇÅ := {A, A ‚ä∏ B}) (Œî‚ÇÇ := Œî‚ÇÅ) (Œì‚ÇÅ := {}) (Œì‚ÇÇ := Œì)
    rfl
    simp
    apply LollipopElim (A := A)
    rfl
    apply H‚ÇÇ

def chooseLeft :
  Œî = {A & B} + Œî‚ÇÅ ‚Üí     {A} + Œî‚ÇÅ ‚ä¢ Œì ‚Üí
  -------------------------------------
                  Œî ‚ä¢ Œì
  := by
    intros H
    subst H
    apply cut (A := {A}) (Œî‚ÇÅ := {A & B}) (Œî‚ÇÇ := Œî‚ÇÅ) (Œì‚ÇÅ := {}) (Œì‚ÇÇ := Œì); try simp
    simp
    apply LL.AddConjElimL
    apply LL.Init

def chooseRight :
  Œî = {A & B} + Œî‚ÇÅ ‚Üí     {B} + Œî‚ÇÅ ‚ä¢ Œì ‚Üí
  -------------------------------------
                  Œî ‚ä¢ Œì
  := by
    intros H
    subst H
    apply cut (A := {B}) (Œî‚ÇÅ := {A & B}) (Œî‚ÇÇ := Œî‚ÇÅ) (Œì‚ÇÅ := {}) (Œì‚ÇÇ := Œì); try simp
    simp
    apply LL.AddConjElimR
    apply LL.Init

open Lean Elab Tactic Meta Quote Term

elab "chooseLeft" : tactic => do
  evalTactic (‚Üê `(tactic| apply chooseLeft; try rfl))

elab "chooseRight" : tactic => do
  evalTactic (‚Üê `(tactic| apply chooseRight; try rfl))

elab "victory" : tactic => do
  evalTactic (‚Üê `(tactic| apply LL.Init))

def is‚Öã x := ‚àÉ lhs rhs, x = lhs ‚Öã rhs

instance : DecidablePred is‚Öã := by
  unfold is‚Öã
  intros x
  cases x <;> try (left; simp; done)
  right
  simp

def isLollipopWithLHS lhs p := ‚àÉ rhs, p = (~ lhs) ‚Öã rhs
instance : DecidablePred (isLollipopWithLHS lhs) := by
  unfold isLollipopWithLHS
  intros x
  simp
  cases x with
  | MulDisj a b =>
    if a = ~ lhs
    then right; exists b; simp; assumption
    else left; intros E; cases E; sorry
  | _ => left; simp

-- Finds a lollipop with the given LHS (i.e. a `lhs ‚ä∏ _`) within a multiset, returning the whole
-- lollipop.
def findLollipop (lhs : LLProp) (ctx : Multiset LLProp) : Option LLProp :=
  if decide (h := Multiset.decidableExistsMultiset) (‚àÉ x ‚àà ctx, is‚Öã x)
  then some lhs
  else none

elab "spend" spent:term : tactic => unsafe do
  let goal ‚Üê Lean.Elab.Tactic.getMainTarget
  match goal with
  | Expr.app (Expr.app (Expr.const ``LL _) ctx) _ =>
    let ctx' ‚Üê evalExpr (Multiset LLProp) (mkApp (mkConst `Multiset) (mkConst `LLProp)) ctx
    match findLollipop LLProp.Coin ctx' with
    | some s => logInfo s!"yes"
    | none => logInfo "nope"
  | _ => logInfo "no"
    -- evalTactic (‚Üê `(tactic| apply lollipopElim (A := $spent)))

-- If you start with a coin, and you reach a store that sells a candie or a cookie, and having a
-- cookie leads to victory, prove you can win!
def game1
  : { .Coin
    , .Coin ‚ä∏ (.Candy & .Cookie)
    , .Cookie ‚ä∏ .Victory
    } ‚ä¢ {.Victory}
  :=
  by
  -- Not sure why `; try rfl` doesn't solve the second subgoal here
  spend .Coin

  apply lollipopElim (A := .Coin) (B := .Candy & .Cookie) (Œî‚ÇÅ := {.Cookie ‚ä∏ .Victory}); try rfl
  chooseRight
  apply lollipopElim (A := .Cookie) (B := .Victory) (Œî‚ÇÅ := {}); try rfl
  victory
